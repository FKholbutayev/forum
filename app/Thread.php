<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\Reply;
use App\User;
use App\Channel;
use App\ThreadSubscription;

class Thread extends Model
{
    use RecordsActivity;
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function($thread) {
            $thread->replies->each->delete();
        });

    }

    protected $guarded = [];
    protected $with = ['creator', 'channel'];
    protected $appends = ['isSubscribedTo'];

    public function path()
    {
        return '/threads/' . $this->channel->slug . '/' . $this->id;
    }

    public function replies()
    {
        return $this->hasMany(Reply::class, 'thread_id');

    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function addReply($reply)
    {
        return $this->replies()->create($reply);
    }

    public function channel()
    {
        return $this->belongsTo(Channel::class);
    }

    public function scopeFilter($query, $filters)
    {
        return $filters->apply($query);
    }

    public function subscribe($userId=null)
    {
        return $this->subscription()->create([
            'user_id' => $userId? : auth()->id()
        ]);
    }

    public function unsubscribe($userId=null)
    {
        return $this->subscription()
                    ->where('user_id', $userId?:auth()->id())
                    ->delete();
    }

    public function subscription()
    {
        return $this->hasMany(ThreadSubscription::class);
    }

    public function getIsSubscribedToAttribute()
    {
        return $this->subscription()
                    ->where('user_id', auth()->id())
                    ->exists();
        }
}
